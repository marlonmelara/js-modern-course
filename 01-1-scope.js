//* Scope de variables

// Variables globales
// Aqu칤 se est치n declarando tres variables en el 치mbito global
let nombre = "Sally"; // 'nombre' es una variable que puede ser reasignada y est치 inicializada con el valor "Sally"

var edad = 6; // 'edad' es otra variable que puede ser reasignada y est치 inicializada con el valor 6

const AMIGO = "Woodstock"; // 'AMIGO' es una constante y no puede ser reasignada, est치 inicializada con el valor "Woodstock"

// Variables en una funci칩n (en un bloque)
// Esta funci칩n demuestra el concepto de 치mbito de bloque y c칩mo las variables declaradas dentro de una funci칩n tienen un 치mbito local

function saludar() {
  let nombre = "Linus"; // 'nombre' es una variable local que est치 en el 치mbito de la funci칩n 'saludar' y est치 inicializada con el valor "Linus"

  nombre2 = "Charlie"; // 游녤 'nombre2' no est치 declarada con let, var o const, por lo que se elevar치 al 치mbito global

  var edad = 9; // 'edad' es una variable local que est치 en el 치mbito de la funci칩n 'saludar' y est치 inicializada con el valor 9

  const AMIGO = "Snoopy"; // 'AMIGO' es una constante local que est치 en el 치mbito de la funci칩n 'saludar' y est치 inicializada con el valor "Snoopy"

  console.log(nombre, nombre2, edad, AMIGO); // Se imprimen las variables locales en la consola
}
saludar(); // Se llama a la funci칩n 'saludar', lo que resulta en la impresi칩n de las variables locales en la consola

console.log(nombre, edad, AMIGO); // Se imprimen las variables globales en la consola

// En este c칩digo, se demuestra c칩mo el 치mbito (scope) afecta la visibilidad y la vida de las variables.
// Las variables globales est치n disponibles en todo el archivo, mientras que las variables locales solo est치n disponibles dentro de la funci칩n en la que fueron declaradas.
// 游뛀 Tambi칠n se muestra c칩mo una variable no declarada (nombre2) se eleva al 치mbito global, lo que generalmente se considera una mala pr치ctica y puede causar errores dif칤ciles de depurar.
